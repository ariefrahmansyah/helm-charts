# ---------------------------------------------------------------------
# Core System settings
# This section consists of Core components of Flyte and their deployment
# settings. This includes FlyteAdmin service, Datacatalog, FlytePropeller and
# Flyteconsole
# ---------------------------------------------------------------------

#
# FLYTEADMIN
#

flyteadmin: {} # use default config

#
# DATACATALOG
#

datacatalog: {}

#
# FLYTEPROPELLER
#

flytepropeller: {}

#
# FLYTECONSOLE
#

flyteconsole: {}

# ----------------------------------------------
# Sandbox Configuration
# Sandbox allows to run flyte without any cloud dependencies and can be run even locally on your laptop.
# This is achieved by replacing cloud service dependencies by k8s local alternatives. These may not be ideal
# for a high performance setup, but are great to try out flyte
# -----------------------------------------------
#
# REDIS SETTINGS
#

redis:
  enabled: false

#
# POSTGRES
#

postgres:
  image:
    # Override postgres image to use alpine based (rather smaller) docker image
    tag: "10.16-alpine"

#
# MINIO
#

minio: {}

#
# CONTOUR
#

contour:
  contour: {}
  envoy:
    service:
      type: NodePort
      ports:
        http: 80
      nodePorts:
        http: 30081

#
# KUBERNETES DASHBOARD
#
kubernetes-dashboard:
  enabled: true
  extraArgs:
    - --enable-skip-login
    - --enable-insecure-login
    - --disable-settings-authorizer
  protocolHttp: true
  service:
    type: NodePort
    externalPort: 30082

# ------------------------------------------------
#
# COMMON SETTINGS
#

common:
  databaseSecret: {}
  ingress:
    # enable HMR route to flyteconsole for frontend development.
    webpackHMR: true
    tls:
      enabled: false
  flyteNamespaceTemplate: {}

# -----------------------------------------------------
# Core dependencies that should be configured for Flyte to work on any platform
# Specifically 2 - Storage (s3, gcs etc), Production RDBMS - Aurora, CloudSQL etc
# ------------------------------------------------------
#
# STORAGE SETTINGS
#

storage:
  # -- Sets the storage type. Supported values are sandbox, s3, gcs and custom.
  type: sandbox
  # -- bucketName defines the storage bucket flyte will use. Required for all types except for sandbox.
  bucketName: my-s3-bucket

# Database configuration
db:
  database:
    port: 5432
    username: postgres
    host: postgres
    dbname: flyte_development

# --------------------------------------------------------------------
# Specializing your deployment using configuration
# -------------------------------------------------------------------
#
# CONFIGMAPS SETTINGS
#

configmap:
  # Task default resources configuration
  task_resource_defaults:
    task_resources:
      defaults:
        memory: 200Mi

  # Core propeller configuration
  core:
    propeller:
      rawoutput-prefix: s3://my-s3-bucket/
      workers: 20
      max-workflow-retries: 30

  # Plugins configuration
  enabled_plugins:
    tasks:
      task-plugins:
        enabled-plugins:
          - container
          - sidecar
          - k8s-array
        default-for-task-types:
          container: container
          sidecar: sidecar
          container_array: k8s-array

  # Kubernetes plugin configuration
  k8s:
    plugins:
      k8s:
        default-env-vars:
          - FLYTE_AWS_ENDPOINT: "http://minio.flyte:9000"
          - FLYTE_AWS_ACCESS_KEY_ID: minio
          - FLYTE_AWS_SECRET_ACCESS_KEY: miniostorage
        default-memory: 200Mi

  # Logger configuration
  logger:
    logger:
      show-source: true
      level: 4

  # Resource manager configuration
  resource_manager:
    propeller:
      resourcemanager:
        type: noop
        redis: null

  # Tasks logs plugin configuration
  task_logs:
    plugins:
      logs:
        kubernetes-enabled: true
        kubernetes-template-uri: "http://localhost:30082/#/log/{{ .namespace }}/{{ .podName }}/pod?namespace={{ .namespace }}"

# ----------------------------------------------------------------
# Optional Modules
# Flyte built extensions that enable various additional features in Flyte.
# All these features are optional, but are critical to run certain features
# ------------------------------------------------------------------------

# --
# Flyte uses a cloud hosted Cron scheduler to run workflows on a schedule. The following module is optional. Without,
# this module, you will not have scheduled launchplans/workflows.
workflow_scheduler:
  enabled: false

# --
# Workflow notifications module is an optional dependency. Flyte uses cloud native pub-sub systems to notify users of
# various events in their workflows
workflow_notifications:
  enabled: false

# -- Configuration for the Cluster resource manager component. This is an optional component, that enables automatic
# cluster configuration. This is useful to set default quotas, manage namespaces etc that map to a project/domain
cluster_resource_manager:
  # -- Enables the Cluster resource manager component
  enabled: true

# --------------------------------------------------------
# Optional Plugins
# --------------------------------------------------------

#
# SPARKOPERATOR
#

sparkoperator:
  enabled: false

#
# PYTORCHOPERATOR
#

pytorchoperator:
  enabled: false
# ----------------------
# Distributed tensorflow training using the TF-Operator
#

# ----------------------
# Training on AWS Sagemaker using AWS Sagemaker operator
#

# ---------------------------
# Flink jobs using the Flink Operator
#
